#version 450

// #define WINDOW3X3
// #define WINDOW5X5
#define WINDOW7X7

#define WORK_GROUP_AXIS_SIZE 128

const float SIGMA = 3.0;

#ifdef WINDOW3X3
    const int R = 1;
#endif
#ifdef WINDOW5X5
    const int R = 2;
#endif
#ifdef WINDOW7X7
    const int R = 3;
#endif

layout(local_size_x = WORK_GROUP_AXIS_SIZE) in;

layout(push_constant) uniform params {
  uint width;
  uint mask;
} PushConstant;

layout(binding = 0, rgba8) uniform readonly image2D srcImage;
layout(binding = 1, rgba8) uniform writeonly image2D dstImage;

const int WINDOW_LEN = WORK_GROUP_AXIS_SIZE + 2 * R;
shared vec3 window[WINDOW_LEN];

void main() {
  int offset = 0;
  ivec2 globalCoord = ivec2(PushConstant.mask.x == 1 ? gl_GlobalInvocationID.xy : gl_GlobalInvocationID.yx); 
  ivec2 mask = ivec2(PushConstant.mask, PushConstant.mask ^ 1);
  ivec2 globalID = ivec2(globalCoord) - mask * R;

  while (offset + gl_LocalInvocationID.x < WINDOW_LEN) {
    ivec2 coord = globalID + mask * offset;
    window[offset + gl_LocalInvocationID.x] = all(greaterThanEqual(coord, ivec2(0))) && all(lessThan(coord, ivec2(PushConstant.width))) ? imageLoad(srcImage, coord).rgb : vec3(1);
    offset += WORK_GROUP_AXIS_SIZE;
  }

  barrier();

  if (gl_GlobalInvocationID.x < PushConstant.width) {
    vec3 resColor = window[gl_LocalInvocationID.x + R];
    float w = 0;
    for (int i = 1; i <= R; ++i) {
      float e = exp(-(i * i) / (2 * SIGMA * SIGMA));
      resColor += (window[gl_LocalInvocationID.x + R - i] + window[gl_LocalInvocationID.x + R + i]) * e;
      w += e;
    }
    w = w * 2 + 1;
    imageStore(dstImage, globalCoord, vec4(resColor / w, 1.0));
  }
}