#version 450

layout(constant_id = 0) const int WORK_GROUP_AXIS_SIZE = 128;
layout(constant_id = 1) const int WINDOW_R = 1;
layout(constant_id = 2) const bool isVertical = true;

layout(local_size_x_id = 0) in;

layout(push_constant) uniform params_t {
    vec2 resolution;
    float gaussian_divisor;
} params;

layout(binding = 0) uniform sampler2D srcImage;
layout(binding = 1, rgba8) uniform writeonly image2D dstImage;

const int WINDOW_LEN = WORK_GROUP_AXIS_SIZE + 2 * WINDOW_R;
shared vec3 window[WINDOW_LEN];

void main() {
    ivec2 globalCoord = gl_GlobalInvocationID.xy;

    if (isVertical)
        globalCoord.x -= WINDOW_R;
    else
        globalCoord.y -= WINDOW_R;

    window[gl_LocalInvocationIndex] = textureLod(srcImage, (globalCoord + 0.5) / params.resolution, 0).rgb;
    int index = gl_LocalInvocationIndex + WORK_GROUP_AXIS_SIZE;

    if (isVertical)
        globalCoord.x += WORK_GROUP_AXIS_SIZE;
    else
        globalCoord.y += WORK_GROUP_AXIS_SIZE;

    if (index < WINDOW_LEN)
        window[index] = textureLod(srcImage, (globalCoord + 0.5) / params.resolution, 0).rgb;

    barrier();

    if (all(lessThan(gl_GlobalInvocationID.xy < PushConstant.resolution))) {
        vec3 resColor = window[gl_LocalInvocationIndex + WINDOW_R];
        float w = 0.5;
        for (int i = 1; i <= WINDOW_R; ++i) {
            float e = exp(i * i * params.gaussian_divisor);
            resColor += (window[gl_LocalInvocationID.x + WINDOW_R - i] + window[gl_LocalInvocationID.x + WINDOW_R + i]) * e;
            w += e;
        }
        w *= 2.0;
        imageStore(dstImage, ivec2(gl_GlobalInvocationID.xy), vec4(resColor / w, 1.0));
    }
}